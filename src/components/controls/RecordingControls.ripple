import type { Context, Settings } from '../../types.d';
import RecordingAPI from '../../lib/index';
import { effect } from 'ripple';

export default component RecordingControls(props: { $context: Context, $settings: Settings }) {
	let $countdown = 0;

	let durationInterval;
	let $duration = -3600000;
	let $durationDate = new Date(0);

	effect(() => {
		$durationDate = new Date($duration);
	});

	<section>
		if (props.$context.$isRecording) {
			<strong>
				{`${$durationDate.getHours().toString().padStart(2, '0')}:${$durationDate.getMinutes().toString().padStart(2, '0')}:${$durationDate.getSeconds().toString().padStart(2, '0')}`}
			</strong>
		}
		<button
			id='main-button'
			type='button'
			$aria-label={props.$isRecording ? 'Stop' : 'Start'}
			onClick={() => {
				if (!props.$context.$isRecording) {
					let interval;
					if (!props.$settings.$skipCountdown) {
						$countdown = 3;
						interval = setInterval(() => {
							$countdown--;
						}, 1000);
					}
					setTimeout(() => {
						if (interval) clearInterval(interval);
						RecordingAPI.startRecording(props.$context.$selectedSource, props.$settings);
						props.$context.$isRecording = true;
						$duration = -3600000;
						durationInterval = setInterval(() => {
							$duration += 1000;
						}, 1000);
						props.$context.$isPaused = false;
					}, !props.$settings.$skipCountdown ? 3200 : 100)
				} else {
					if (props.$context.$isPaused) {
						RecordingAPI.resumeRecording();
						durationInterval = setInterval(() => {
							$duration += 1000;
						}, 1000);
						props.$context.$isPaused = false;
					} else {
						RecordingAPI.pauseRecording();
						clearInterval(durationInterval);
						props.$context.$isPaused = true;
					}
				}
			}}
			$style={`
				background: ${props.$context.$isRecording ? props.$context.$isPaused ? '#ffa9a9' : '#E8E8E8' : '#FF4421'};
			`}
			$disabled={!props.$context.$selectedSource?.active}
		>
			if ($countdown != 0) {
				<strong>{$countdown}</strong>
			} else {
				<img $src={props.$context.$isRecording ? props.$context.$isPaused ? '/icons/resume.svg' : "/icons/paused.svg" : '/icons/start.svg'} alt='' />
			}
		</button>
		if (props.$context.$isRecording) {
			<button
				class="icon-button"
				id="stop_button"
				type="button"
				aria-label='Stop & save'
				onClick={() => {
					RecordingAPI.stopRecording();
					props.$context.$isRecording = false;
					clearInterval(durationInterval);
				}}
				style="background: var(--background-3);border-radius:var(--rounded-1);"
			>
				<img src="/icons/close.svg" alt="Stop & save" />
			</button>
		}
	</section>

	<style>
	  	section {
			display: flex;
			justify-content: center;
			align-items: center;
			gap: 12px;
		}
		#main-button {
			width: 50px;
			height: 50px;
			border: none;
			outline: none;
			border-radius: var(--rounded-full);
		}

		#main-button:active {
			transform: scale(1.2);
		}

		#main-button:disabled {
			opacity: 0.1;
		}

		#main-button strong {
			color: var(--white);
			font-size: 16px;
		}
	</style>
}